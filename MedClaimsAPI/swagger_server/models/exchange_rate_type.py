# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ExchangeRateType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, exchange_rate_nbr: str=None, currency_id: str=None, exchange_rate: float=None):  # noqa: E501
        """ExchangeRateType - a model defined in Swagger

        :param exchange_rate_nbr: The exchange_rate_nbr of this ExchangeRateType.  # noqa: E501
        :type exchange_rate_nbr: str
        :param currency_id: The currency_id of this ExchangeRateType.  # noqa: E501
        :type currency_id: str
        :param exchange_rate: The exchange_rate of this ExchangeRateType.  # noqa: E501
        :type exchange_rate: float
        """
        self.swagger_types = {
            'exchange_rate_nbr': str,
            'currency_id': str,
            'exchange_rate': float
        }

        self.attribute_map = {
            'exchange_rate_nbr': 'exchangeRateNbr',
            'currency_id': 'currencyId',
            'exchange_rate': 'exchangeRate'
        }
        self._exchange_rate_nbr = exchange_rate_nbr
        self._currency_id = currency_id
        self._exchange_rate = exchange_rate

    @classmethod
    def from_dict(cls, dikt) -> 'ExchangeRateType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExchangeRateType of this ExchangeRateType.  # noqa: E501
        :rtype: ExchangeRateType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exchange_rate_nbr(self) -> str:
        """Gets the exchange_rate_nbr of this ExchangeRateType.


        :return: The exchange_rate_nbr of this ExchangeRateType.
        :rtype: str
        """
        return self._exchange_rate_nbr

    @exchange_rate_nbr.setter
    def exchange_rate_nbr(self, exchange_rate_nbr: str):
        """Sets the exchange_rate_nbr of this ExchangeRateType.


        :param exchange_rate_nbr: The exchange_rate_nbr of this ExchangeRateType.
        :type exchange_rate_nbr: str
        """

        self._exchange_rate_nbr = exchange_rate_nbr

    @property
    def currency_id(self) -> str:
        """Gets the currency_id of this ExchangeRateType.


        :return: The currency_id of this ExchangeRateType.
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id: str):
        """Sets the currency_id of this ExchangeRateType.


        :param currency_id: The currency_id of this ExchangeRateType.
        :type currency_id: str
        """
        if currency_id is None:
            raise ValueError("Invalid value for `currency_id`, must not be `None`")  # noqa: E501

        self._currency_id = currency_id

    @property
    def exchange_rate(self) -> float:
        """Gets the exchange_rate of this ExchangeRateType.


        :return: The exchange_rate of this ExchangeRateType.
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate: float):
        """Sets the exchange_rate of this ExchangeRateType.


        :param exchange_rate: The exchange_rate of this ExchangeRateType.
        :type exchange_rate: float
        """
        if exchange_rate is None:
            raise ValueError("Invalid value for `exchange_rate`, must not be `None`")  # noqa: E501

        self._exchange_rate = exchange_rate
