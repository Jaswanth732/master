# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.reported_invoices_list_type import ReportedInvoicesListType  # noqa: F401,E501
from swagger_server import util


class InvoiceReportType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, run_number: int=None, report_date: datetime=None, report_user_id: str=None, reported_invoices: ReportedInvoicesListType=None):  # noqa: E501
        """InvoiceReportType - a model defined in Swagger

        :param run_number: The run_number of this InvoiceReportType.  # noqa: E501
        :type run_number: int
        :param report_date: The report_date of this InvoiceReportType.  # noqa: E501
        :type report_date: datetime
        :param report_user_id: The report_user_id of this InvoiceReportType.  # noqa: E501
        :type report_user_id: str
        :param reported_invoices: The reported_invoices of this InvoiceReportType.  # noqa: E501
        :type reported_invoices: ReportedInvoicesListType
        """
        self.swagger_types = {
            'run_number': int,
            'report_date': datetime,
            'report_user_id': str,
            'reported_invoices': ReportedInvoicesListType
        }

        self.attribute_map = {
            'run_number': 'runNumber',
            'report_date': 'reportDate',
            'report_user_id': 'reportUserId',
            'reported_invoices': 'reportedInvoices'
        }
        self._run_number = run_number
        self._report_date = report_date
        self._report_user_id = report_user_id
        self._reported_invoices = reported_invoices

    @classmethod
    def from_dict(cls, dikt) -> 'InvoiceReportType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InvoiceReportType of this InvoiceReportType.  # noqa: E501
        :rtype: InvoiceReportType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def run_number(self) -> int:
        """Gets the run_number of this InvoiceReportType.


        :return: The run_number of this InvoiceReportType.
        :rtype: int
        """
        return self._run_number

    @run_number.setter
    def run_number(self, run_number: int):
        """Sets the run_number of this InvoiceReportType.


        :param run_number: The run_number of this InvoiceReportType.
        :type run_number: int
        """
        if run_number is None:
            raise ValueError("Invalid value for `run_number`, must not be `None`")  # noqa: E501

        self._run_number = run_number

    @property
    def report_date(self) -> datetime:
        """Gets the report_date of this InvoiceReportType.


        :return: The report_date of this InvoiceReportType.
        :rtype: datetime
        """
        return self._report_date

    @report_date.setter
    def report_date(self, report_date: datetime):
        """Sets the report_date of this InvoiceReportType.


        :param report_date: The report_date of this InvoiceReportType.
        :type report_date: datetime
        """
        if report_date is None:
            raise ValueError("Invalid value for `report_date`, must not be `None`")  # noqa: E501

        self._report_date = report_date

    @property
    def report_user_id(self) -> str:
        """Gets the report_user_id of this InvoiceReportType.


        :return: The report_user_id of this InvoiceReportType.
        :rtype: str
        """
        return self._report_user_id

    @report_user_id.setter
    def report_user_id(self, report_user_id: str):
        """Sets the report_user_id of this InvoiceReportType.


        :param report_user_id: The report_user_id of this InvoiceReportType.
        :type report_user_id: str
        """
        if report_user_id is None:
            raise ValueError("Invalid value for `report_user_id`, must not be `None`")  # noqa: E501

        self._report_user_id = report_user_id

    @property
    def reported_invoices(self) -> ReportedInvoicesListType:
        """Gets the reported_invoices of this InvoiceReportType.


        :return: The reported_invoices of this InvoiceReportType.
        :rtype: ReportedInvoicesListType
        """
        return self._reported_invoices

    @reported_invoices.setter
    def reported_invoices(self, reported_invoices: ReportedInvoicesListType):
        """Sets the reported_invoices of this InvoiceReportType.


        :param reported_invoices: The reported_invoices of this InvoiceReportType.
        :type reported_invoices: ReportedInvoicesListType
        """
        if reported_invoices is None:
            raise ValueError("Invalid value for `reported_invoices`, must not be `None`")  # noqa: E501

        self._reported_invoices = reported_invoices
