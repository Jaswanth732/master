# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ReportedInvoiceType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, invoice_nbr: int=None, report_nbr: int=None, report_type_id: str=None):  # noqa: E501
        """ReportedInvoiceType - a model defined in Swagger

        :param invoice_nbr: The invoice_nbr of this ReportedInvoiceType.  # noqa: E501
        :type invoice_nbr: int
        :param report_nbr: The report_nbr of this ReportedInvoiceType.  # noqa: E501
        :type report_nbr: int
        :param report_type_id: The report_type_id of this ReportedInvoiceType.  # noqa: E501
        :type report_type_id: str
        """
        self.swagger_types = {
            'invoice_nbr': int,
            'report_nbr': int,
            'report_type_id': str
        }

        self.attribute_map = {
            'invoice_nbr': 'invoiceNbr',
            'report_nbr': 'reportNbr',
            'report_type_id': 'reportTypeId'
        }
        self._invoice_nbr = invoice_nbr
        self._report_nbr = report_nbr
        self._report_type_id = report_type_id

    @classmethod
    def from_dict(cls, dikt) -> 'ReportedInvoiceType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReportedInvoiceType of this ReportedInvoiceType.  # noqa: E501
        :rtype: ReportedInvoiceType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def invoice_nbr(self) -> int:
        """Gets the invoice_nbr of this ReportedInvoiceType.


        :return: The invoice_nbr of this ReportedInvoiceType.
        :rtype: int
        """
        return self._invoice_nbr

    @invoice_nbr.setter
    def invoice_nbr(self, invoice_nbr: int):
        """Sets the invoice_nbr of this ReportedInvoiceType.


        :param invoice_nbr: The invoice_nbr of this ReportedInvoiceType.
        :type invoice_nbr: int
        """
        if invoice_nbr is None:
            raise ValueError("Invalid value for `invoice_nbr`, must not be `None`")  # noqa: E501

        self._invoice_nbr = invoice_nbr

    @property
    def report_nbr(self) -> int:
        """Gets the report_nbr of this ReportedInvoiceType.


        :return: The report_nbr of this ReportedInvoiceType.
        :rtype: int
        """
        return self._report_nbr

    @report_nbr.setter
    def report_nbr(self, report_nbr: int):
        """Sets the report_nbr of this ReportedInvoiceType.


        :param report_nbr: The report_nbr of this ReportedInvoiceType.
        :type report_nbr: int
        """
        if report_nbr is None:
            raise ValueError("Invalid value for `report_nbr`, must not be `None`")  # noqa: E501

        self._report_nbr = report_nbr

    @property
    def report_type_id(self) -> str:
        """Gets the report_type_id of this ReportedInvoiceType.


        :return: The report_type_id of this ReportedInvoiceType.
        :rtype: str
        """
        return self._report_type_id

    @report_type_id.setter
    def report_type_id(self, report_type_id: str):
        """Sets the report_type_id of this ReportedInvoiceType.


        :param report_type_id: The report_type_id of this ReportedInvoiceType.
        :type report_type_id: str
        """
        if report_type_id is None:
            raise ValueError("Invalid value for `report_type_id`, must not be `None`")  # noqa: E501

        self._report_type_id = report_type_id
