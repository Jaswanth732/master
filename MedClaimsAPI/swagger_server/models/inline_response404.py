# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.error400_info_type import Error400InfoType  # noqa: F401,E501
from swagger_server import util


class InlineResponse404(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, error404: Error400InfoType=None):  # noqa: E501
        """InlineResponse404 - a model defined in Swagger

        :param error404: The error404 of this InlineResponse404.  # noqa: E501
        :type error404: Error400InfoType
        """
        self.swagger_types = {
            'error404': Error400InfoType
        }

        self.attribute_map = {
            'error404': 'error404'
        }
        self._error404 = error404

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse404':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_404 of this InlineResponse404.  # noqa: E501
        :rtype: InlineResponse404
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error404(self) -> Error400InfoType:
        """Gets the error404 of this InlineResponse404.


        :return: The error404 of this InlineResponse404.
        :rtype: Error400InfoType
        """
        return self._error404

    @error404.setter
    def error404(self, error404: Error400InfoType):
        """Sets the error404 of this InlineResponse404.


        :param error404: The error404 of this InlineResponse404.
        :type error404: Error400InfoType
        """
        if error404 is None:
            raise ValueError("Invalid value for `error404`, must not be `None`")  # noqa: E501

        self._error404 = error404
