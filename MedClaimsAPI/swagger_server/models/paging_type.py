# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PagingType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, page_number: int=None, page_size: int=None):  # noqa: E501
        """PagingType - a model defined in Swagger

        :param page_number: The page_number of this PagingType.  # noqa: E501
        :type page_number: int
        :param page_size: The page_size of this PagingType.  # noqa: E501
        :type page_size: int
        """
        self.swagger_types = {
            'page_number': int,
            'page_size': int
        }

        self.attribute_map = {
            'page_number': 'pageNumber',
            'page_size': 'pageSize'
        }
        self._page_number = page_number
        self._page_size = page_size

    @classmethod
    def from_dict(cls, dikt) -> 'PagingType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PagingType of this PagingType.  # noqa: E501
        :rtype: PagingType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def page_number(self) -> int:
        """Gets the page_number of this PagingType.


        :return: The page_number of this PagingType.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number: int):
        """Sets the page_number of this PagingType.


        :param page_number: The page_number of this PagingType.
        :type page_number: int
        """
        if page_number is None:
            raise ValueError("Invalid value for `page_number`, must not be `None`")  # noqa: E501

        self._page_number = page_number

    @property
    def page_size(self) -> int:
        """Gets the page_size of this PagingType.


        :return: The page_size of this PagingType.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size: int):
        """Sets the page_size of this PagingType.


        :param page_size: The page_size of this PagingType.
        :type page_size: int
        """
        if page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")  # noqa: E501

        self._page_size = page_size
