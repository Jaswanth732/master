# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.amount_type import AmountType  # noqa: F401,E501
from swagger_server.models.batch_custom_type import BatchCustomType  # noqa: F401,E501
from swagger_server.models.batch_submission_method_type import BatchSubmissionMethodType  # noqa: F401,E501
from swagger_server.models.batch_type_notes import BatchTypeNotes  # noqa: F401,E501
from swagger_server import util


class BatchType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, batch_nbr: int=None, external_batch_ref_id: str=None, submitter_type_id: str=None, submitted_by_id: str=None, payment_date: datetime=None, number_of_invoices: int=None, batch_amount: AmountType=None, status_id: str=None, submission_method: BatchSubmissionMethodType=None, received_date: datetime=None, creation_date: datetime=None, creation_user_id: str=None, notes: BatchTypeNotes=None, custom: BatchCustomType=None):  # noqa: E501
        """BatchType - a model defined in Swagger

        :param batch_nbr: The batch_nbr of this BatchType.  # noqa: E501
        :type batch_nbr: int
        :param external_batch_ref_id: The external_batch_ref_id of this BatchType.  # noqa: E501
        :type external_batch_ref_id: str
        :param submitter_type_id: The submitter_type_id of this BatchType.  # noqa: E501
        :type submitter_type_id: str
        :param submitted_by_id: The submitted_by_id of this BatchType.  # noqa: E501
        :type submitted_by_id: str
        :param payment_date: The payment_date of this BatchType.  # noqa: E501
        :type payment_date: datetime
        :param number_of_invoices: The number_of_invoices of this BatchType.  # noqa: E501
        :type number_of_invoices: int
        :param batch_amount: The batch_amount of this BatchType.  # noqa: E501
        :type batch_amount: AmountType
        :param status_id: The status_id of this BatchType.  # noqa: E501
        :type status_id: str
        :param submission_method: The submission_method of this BatchType.  # noqa: E501
        :type submission_method: BatchSubmissionMethodType
        :param received_date: The received_date of this BatchType.  # noqa: E501
        :type received_date: datetime
        :param creation_date: The creation_date of this BatchType.  # noqa: E501
        :type creation_date: datetime
        :param creation_user_id: The creation_user_id of this BatchType.  # noqa: E501
        :type creation_user_id: str
        :param notes: The notes of this BatchType.  # noqa: E501
        :type notes: BatchTypeNotes
        :param custom: The custom of this BatchType.  # noqa: E501
        :type custom: BatchCustomType
        """
        self.swagger_types = {
            'batch_nbr': int,
            'external_batch_ref_id': str,
            'submitter_type_id': str,
            'submitted_by_id': str,
            'payment_date': datetime,
            'number_of_invoices': int,
            'batch_amount': AmountType,
            'status_id': str,
            'submission_method': BatchSubmissionMethodType,
            'received_date': datetime,
            'creation_date': datetime,
            'creation_user_id': str,
            'notes': BatchTypeNotes,
            'custom': BatchCustomType
        }

        self.attribute_map = {
            'batch_nbr': 'batchNbr',
            'external_batch_ref_id': 'externalBatchRefId',
            'submitter_type_id': 'submitterTypeId',
            'submitted_by_id': 'submittedById',
            'payment_date': 'paymentDate',
            'number_of_invoices': 'numberOfInvoices',
            'batch_amount': 'batchAmount',
            'status_id': 'statusId',
            'submission_method': 'submissionMethod',
            'received_date': 'receivedDate',
            'creation_date': 'creationDate',
            'creation_user_id': 'creationUserId',
            'notes': 'notes',
            'custom': 'custom'
        }
        self._batch_nbr = batch_nbr
        self._external_batch_ref_id = external_batch_ref_id
        self._submitter_type_id = submitter_type_id
        self._submitted_by_id = submitted_by_id
        self._payment_date = payment_date
        self._number_of_invoices = number_of_invoices
        self._batch_amount = batch_amount
        self._status_id = status_id
        self._submission_method = submission_method
        self._received_date = received_date
        self._creation_date = creation_date
        self._creation_user_id = creation_user_id
        self._notes = notes
        self._custom = custom

    @classmethod
    def from_dict(cls, dikt) -> 'BatchType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BatchType of this BatchType.  # noqa: E501
        :rtype: BatchType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_nbr(self) -> int:
        """Gets the batch_nbr of this BatchType.


        :return: The batch_nbr of this BatchType.
        :rtype: int
        """
        return self._batch_nbr

    @batch_nbr.setter
    def batch_nbr(self, batch_nbr: int):
        """Sets the batch_nbr of this BatchType.


        :param batch_nbr: The batch_nbr of this BatchType.
        :type batch_nbr: int
        """

        self._batch_nbr = batch_nbr

    @property
    def external_batch_ref_id(self) -> str:
        """Gets the external_batch_ref_id of this BatchType.


        :return: The external_batch_ref_id of this BatchType.
        :rtype: str
        """
        return self._external_batch_ref_id

    @external_batch_ref_id.setter
    def external_batch_ref_id(self, external_batch_ref_id: str):
        """Sets the external_batch_ref_id of this BatchType.


        :param external_batch_ref_id: The external_batch_ref_id of this BatchType.
        :type external_batch_ref_id: str
        """
        if external_batch_ref_id is None:
            raise ValueError("Invalid value for `external_batch_ref_id`, must not be `None`")  # noqa: E501

        self._external_batch_ref_id = external_batch_ref_id

    @property
    def submitter_type_id(self) -> str:
        """Gets the submitter_type_id of this BatchType.


        :return: The submitter_type_id of this BatchType.
        :rtype: str
        """
        return self._submitter_type_id

    @submitter_type_id.setter
    def submitter_type_id(self, submitter_type_id: str):
        """Sets the submitter_type_id of this BatchType.


        :param submitter_type_id: The submitter_type_id of this BatchType.
        :type submitter_type_id: str
        """
        if submitter_type_id is None:
            raise ValueError("Invalid value for `submitter_type_id`, must not be `None`")  # noqa: E501

        self._submitter_type_id = submitter_type_id

    @property
    def submitted_by_id(self) -> str:
        """Gets the submitted_by_id of this BatchType.


        :return: The submitted_by_id of this BatchType.
        :rtype: str
        """
        return self._submitted_by_id

    @submitted_by_id.setter
    def submitted_by_id(self, submitted_by_id: str):
        """Sets the submitted_by_id of this BatchType.


        :param submitted_by_id: The submitted_by_id of this BatchType.
        :type submitted_by_id: str
        """
        if submitted_by_id is None:
            raise ValueError("Invalid value for `submitted_by_id`, must not be `None`")  # noqa: E501

        self._submitted_by_id = submitted_by_id

    @property
    def payment_date(self) -> datetime:
        """Gets the payment_date of this BatchType.


        :return: The payment_date of this BatchType.
        :rtype: datetime
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date: datetime):
        """Sets the payment_date of this BatchType.


        :param payment_date: The payment_date of this BatchType.
        :type payment_date: datetime
        """

        self._payment_date = payment_date

    @property
    def number_of_invoices(self) -> int:
        """Gets the number_of_invoices of this BatchType.


        :return: The number_of_invoices of this BatchType.
        :rtype: int
        """
        return self._number_of_invoices

    @number_of_invoices.setter
    def number_of_invoices(self, number_of_invoices: int):
        """Sets the number_of_invoices of this BatchType.


        :param number_of_invoices: The number_of_invoices of this BatchType.
        :type number_of_invoices: int
        """
        if number_of_invoices is None:
            raise ValueError("Invalid value for `number_of_invoices`, must not be `None`")  # noqa: E501

        self._number_of_invoices = number_of_invoices

    @property
    def batch_amount(self) -> AmountType:
        """Gets the batch_amount of this BatchType.


        :return: The batch_amount of this BatchType.
        :rtype: AmountType
        """
        return self._batch_amount

    @batch_amount.setter
    def batch_amount(self, batch_amount: AmountType):
        """Sets the batch_amount of this BatchType.


        :param batch_amount: The batch_amount of this BatchType.
        :type batch_amount: AmountType
        """

        self._batch_amount = batch_amount

    @property
    def status_id(self) -> str:
        """Gets the status_id of this BatchType.


        :return: The status_id of this BatchType.
        :rtype: str
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id: str):
        """Sets the status_id of this BatchType.


        :param status_id: The status_id of this BatchType.
        :type status_id: str
        """

        self._status_id = status_id

    @property
    def submission_method(self) -> BatchSubmissionMethodType:
        """Gets the submission_method of this BatchType.


        :return: The submission_method of this BatchType.
        :rtype: BatchSubmissionMethodType
        """
        return self._submission_method

    @submission_method.setter
    def submission_method(self, submission_method: BatchSubmissionMethodType):
        """Sets the submission_method of this BatchType.


        :param submission_method: The submission_method of this BatchType.
        :type submission_method: BatchSubmissionMethodType
        """

        self._submission_method = submission_method

    @property
    def received_date(self) -> datetime:
        """Gets the received_date of this BatchType.


        :return: The received_date of this BatchType.
        :rtype: datetime
        """
        return self._received_date

    @received_date.setter
    def received_date(self, received_date: datetime):
        """Sets the received_date of this BatchType.


        :param received_date: The received_date of this BatchType.
        :type received_date: datetime
        """

        self._received_date = received_date

    @property
    def creation_date(self) -> datetime:
        """Gets the creation_date of this BatchType.


        :return: The creation_date of this BatchType.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date: datetime):
        """Sets the creation_date of this BatchType.


        :param creation_date: The creation_date of this BatchType.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def creation_user_id(self) -> str:
        """Gets the creation_user_id of this BatchType.


        :return: The creation_user_id of this BatchType.
        :rtype: str
        """
        return self._creation_user_id

    @creation_user_id.setter
    def creation_user_id(self, creation_user_id: str):
        """Sets the creation_user_id of this BatchType.


        :param creation_user_id: The creation_user_id of this BatchType.
        :type creation_user_id: str
        """

        self._creation_user_id = creation_user_id

    @property
    def notes(self) -> BatchTypeNotes:
        """Gets the notes of this BatchType.


        :return: The notes of this BatchType.
        :rtype: BatchTypeNotes
        """
        return self._notes

    @notes.setter
    def notes(self, notes: BatchTypeNotes):
        """Sets the notes of this BatchType.


        :param notes: The notes of this BatchType.
        :type notes: BatchTypeNotes
        """
        if notes is None:
            raise ValueError("Invalid value for `notes`, must not be `None`")  # noqa: E501

        self._notes = notes

    @property
    def custom(self) -> BatchCustomType:
        """Gets the custom of this BatchType.


        :return: The custom of this BatchType.
        :rtype: BatchCustomType
        """
        return self._custom

    @custom.setter
    def custom(self, custom: BatchCustomType):
        """Sets the custom of this BatchType.


        :param custom: The custom of this BatchType.
        :type custom: BatchCustomType
        """

        self._custom = custom
