# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.invoice_imports_type import InvoiceImportsType  # noqa: F401,E501
from swagger_server import util


class SearchInvoiceImportResponseCBMType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, invoice_imports: InvoiceImportsType=None):  # noqa: E501
        """SearchInvoiceImportResponseCBMType - a model defined in Swagger

        :param invoice_imports: The invoice_imports of this SearchInvoiceImportResponseCBMType.  # noqa: E501
        :type invoice_imports: InvoiceImportsType
        """
        self.swagger_types = {
            'invoice_imports': InvoiceImportsType
        }

        self.attribute_map = {
            'invoice_imports': 'invoiceImports'
        }
        self._invoice_imports = invoice_imports

    @classmethod
    def from_dict(cls, dikt) -> 'SearchInvoiceImportResponseCBMType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SearchInvoiceImportResponseCBMType of this SearchInvoiceImportResponseCBMType.  # noqa: E501
        :rtype: SearchInvoiceImportResponseCBMType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def invoice_imports(self) -> InvoiceImportsType:
        """Gets the invoice_imports of this SearchInvoiceImportResponseCBMType.


        :return: The invoice_imports of this SearchInvoiceImportResponseCBMType.
        :rtype: InvoiceImportsType
        """
        return self._invoice_imports

    @invoice_imports.setter
    def invoice_imports(self, invoice_imports: InvoiceImportsType):
        """Sets the invoice_imports of this SearchInvoiceImportResponseCBMType.


        :param invoice_imports: The invoice_imports of this SearchInvoiceImportResponseCBMType.
        :type invoice_imports: InvoiceImportsType
        """
        if invoice_imports is None:
            raise ValueError("Invalid value for `invoice_imports`, must not be `None`")  # noqa: E501

        self._invoice_imports = invoice_imports
