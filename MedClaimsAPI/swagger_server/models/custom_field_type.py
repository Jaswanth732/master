# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CustomFieldType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, custom_field_id: str=None, value: str=None, field_nbr: int=None):  # noqa: E501
        """CustomFieldType - a model defined in Swagger

        :param custom_field_id: The custom_field_id of this CustomFieldType.  # noqa: E501
        :type custom_field_id: str
        :param value: The value of this CustomFieldType.  # noqa: E501
        :type value: str
        :param field_nbr: The field_nbr of this CustomFieldType.  # noqa: E501
        :type field_nbr: int
        """
        self.swagger_types = {
            'custom_field_id': str,
            'value': str,
            'field_nbr': int
        }

        self.attribute_map = {
            'custom_field_id': 'customFieldId',
            'value': 'value',
            'field_nbr': 'fieldNbr'
        }
        self._custom_field_id = custom_field_id
        self._value = value
        self._field_nbr = field_nbr

    @classmethod
    def from_dict(cls, dikt) -> 'CustomFieldType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CustomFieldType of this CustomFieldType.  # noqa: E501
        :rtype: CustomFieldType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_field_id(self) -> str:
        """Gets the custom_field_id of this CustomFieldType.


        :return: The custom_field_id of this CustomFieldType.
        :rtype: str
        """
        return self._custom_field_id

    @custom_field_id.setter
    def custom_field_id(self, custom_field_id: str):
        """Sets the custom_field_id of this CustomFieldType.


        :param custom_field_id: The custom_field_id of this CustomFieldType.
        :type custom_field_id: str
        """
        if custom_field_id is None:
            raise ValueError("Invalid value for `custom_field_id`, must not be `None`")  # noqa: E501

        self._custom_field_id = custom_field_id

    @property
    def value(self) -> str:
        """Gets the value of this CustomFieldType.


        :return: The value of this CustomFieldType.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this CustomFieldType.


        :param value: The value of this CustomFieldType.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def field_nbr(self) -> int:
        """Gets the field_nbr of this CustomFieldType.


        :return: The field_nbr of this CustomFieldType.
        :rtype: int
        """
        return self._field_nbr

    @field_nbr.setter
    def field_nbr(self, field_nbr: int):
        """Sets the field_nbr of this CustomFieldType.


        :param field_nbr: The field_nbr of this CustomFieldType.
        :type field_nbr: int
        """

        self._field_nbr = field_nbr
