# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.error_type_error_message_parameterl_list import ErrorTypeErrorMessageParameterlList  # noqa: F401,E501
from swagger_server import util


class ErrorType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, error_code: str=None, error_description: str=None, entity_name: str=None, field_name: str=None, field_value: str=None, error_message_parameterl_list: ErrorTypeErrorMessageParameterlList=None):  # noqa: E501
        """ErrorType - a model defined in Swagger

        :param error_code: The error_code of this ErrorType.  # noqa: E501
        :type error_code: str
        :param error_description: The error_description of this ErrorType.  # noqa: E501
        :type error_description: str
        :param entity_name: The entity_name of this ErrorType.  # noqa: E501
        :type entity_name: str
        :param field_name: The field_name of this ErrorType.  # noqa: E501
        :type field_name: str
        :param field_value: The field_value of this ErrorType.  # noqa: E501
        :type field_value: str
        :param error_message_parameterl_list: The error_message_parameterl_list of this ErrorType.  # noqa: E501
        :type error_message_parameterl_list: ErrorTypeErrorMessageParameterlList
        """
        self.swagger_types = {
            'error_code': str,
            'error_description': str,
            'entity_name': str,
            'field_name': str,
            'field_value': str,
            'error_message_parameterl_list': ErrorTypeErrorMessageParameterlList
        }

        self.attribute_map = {
            'error_code': 'errorCode',
            'error_description': 'errorDescription',
            'entity_name': 'entityName',
            'field_name': 'fieldName',
            'field_value': 'fieldValue',
            'error_message_parameterl_list': 'errorMessageParameterlList'
        }
        self._error_code = error_code
        self._error_description = error_description
        self._entity_name = entity_name
        self._field_name = field_name
        self._field_value = field_value
        self._error_message_parameterl_list = error_message_parameterl_list

    @classmethod
    def from_dict(cls, dikt) -> 'ErrorType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ErrorType of this ErrorType.  # noqa: E501
        :rtype: ErrorType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_code(self) -> str:
        """Gets the error_code of this ErrorType.


        :return: The error_code of this ErrorType.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code: str):
        """Sets the error_code of this ErrorType.


        :param error_code: The error_code of this ErrorType.
        :type error_code: str
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")  # noqa: E501

        self._error_code = error_code

    @property
    def error_description(self) -> str:
        """Gets the error_description of this ErrorType.


        :return: The error_description of this ErrorType.
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description: str):
        """Sets the error_description of this ErrorType.


        :param error_description: The error_description of this ErrorType.
        :type error_description: str
        """
        if error_description is None:
            raise ValueError("Invalid value for `error_description`, must not be `None`")  # noqa: E501

        self._error_description = error_description

    @property
    def entity_name(self) -> str:
        """Gets the entity_name of this ErrorType.


        :return: The entity_name of this ErrorType.
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name: str):
        """Sets the entity_name of this ErrorType.


        :param entity_name: The entity_name of this ErrorType.
        :type entity_name: str
        """
        if entity_name is None:
            raise ValueError("Invalid value for `entity_name`, must not be `None`")  # noqa: E501

        self._entity_name = entity_name

    @property
    def field_name(self) -> str:
        """Gets the field_name of this ErrorType.


        :return: The field_name of this ErrorType.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name: str):
        """Sets the field_name of this ErrorType.


        :param field_name: The field_name of this ErrorType.
        :type field_name: str
        """
        if field_name is None:
            raise ValueError("Invalid value for `field_name`, must not be `None`")  # noqa: E501

        self._field_name = field_name

    @property
    def field_value(self) -> str:
        """Gets the field_value of this ErrorType.


        :return: The field_value of this ErrorType.
        :rtype: str
        """
        return self._field_value

    @field_value.setter
    def field_value(self, field_value: str):
        """Sets the field_value of this ErrorType.


        :param field_value: The field_value of this ErrorType.
        :type field_value: str
        """
        if field_value is None:
            raise ValueError("Invalid value for `field_value`, must not be `None`")  # noqa: E501

        self._field_value = field_value

    @property
    def error_message_parameterl_list(self) -> ErrorTypeErrorMessageParameterlList:
        """Gets the error_message_parameterl_list of this ErrorType.


        :return: The error_message_parameterl_list of this ErrorType.
        :rtype: ErrorTypeErrorMessageParameterlList
        """
        return self._error_message_parameterl_list

    @error_message_parameterl_list.setter
    def error_message_parameterl_list(self, error_message_parameterl_list: ErrorTypeErrorMessageParameterlList):
        """Sets the error_message_parameterl_list of this ErrorType.


        :param error_message_parameterl_list: The error_message_parameterl_list of this ErrorType.
        :type error_message_parameterl_list: ErrorTypeErrorMessageParameterlList
        """

        self._error_message_parameterl_list = error_message_parameterl_list
