# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.invoice_import_submitter_type import InvoiceImportSubmitterType  # noqa: F401,E501
from swagger_server.models.invoice_import_type_invoice_import_transactions import InvoiceImportTypeInvoiceImportTransactions  # noqa: F401,E501
from swagger_server.models.invoice_import_type_notes import InvoiceImportTypeNotes  # noqa: F401,E501
from swagger_server import util


class InvoiceImportType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, import_nbr: int=None, received_date: datetime=None, submitter_type: InvoiceImportSubmitterType=None, submitted_by_nbr: str=None, import_date: datetime=None, import_user_id: str=None, import_status_id: str=None, failed_reason: str=None, batch_nbr: int=None, successful_transactions_count: int=None, failed_transactions_count: int=None, invoice_import_transactions: InvoiceImportTypeInvoiceImportTransactions=None, notes: InvoiceImportTypeNotes=None):  # noqa: E501
        """InvoiceImportType - a model defined in Swagger

        :param import_nbr: The import_nbr of this InvoiceImportType.  # noqa: E501
        :type import_nbr: int
        :param received_date: The received_date of this InvoiceImportType.  # noqa: E501
        :type received_date: datetime
        :param submitter_type: The submitter_type of this InvoiceImportType.  # noqa: E501
        :type submitter_type: InvoiceImportSubmitterType
        :param submitted_by_nbr: The submitted_by_nbr of this InvoiceImportType.  # noqa: E501
        :type submitted_by_nbr: str
        :param import_date: The import_date of this InvoiceImportType.  # noqa: E501
        :type import_date: datetime
        :param import_user_id: The import_user_id of this InvoiceImportType.  # noqa: E501
        :type import_user_id: str
        :param import_status_id: The import_status_id of this InvoiceImportType.  # noqa: E501
        :type import_status_id: str
        :param failed_reason: The failed_reason of this InvoiceImportType.  # noqa: E501
        :type failed_reason: str
        :param batch_nbr: The batch_nbr of this InvoiceImportType.  # noqa: E501
        :type batch_nbr: int
        :param successful_transactions_count: The successful_transactions_count of this InvoiceImportType.  # noqa: E501
        :type successful_transactions_count: int
        :param failed_transactions_count: The failed_transactions_count of this InvoiceImportType.  # noqa: E501
        :type failed_transactions_count: int
        :param invoice_import_transactions: The invoice_import_transactions of this InvoiceImportType.  # noqa: E501
        :type invoice_import_transactions: InvoiceImportTypeInvoiceImportTransactions
        :param notes: The notes of this InvoiceImportType.  # noqa: E501
        :type notes: InvoiceImportTypeNotes
        """
        self.swagger_types = {
            'import_nbr': int,
            'received_date': datetime,
            'submitter_type': InvoiceImportSubmitterType,
            'submitted_by_nbr': str,
            'import_date': datetime,
            'import_user_id': str,
            'import_status_id': str,
            'failed_reason': str,
            'batch_nbr': int,
            'successful_transactions_count': int,
            'failed_transactions_count': int,
            'invoice_import_transactions': InvoiceImportTypeInvoiceImportTransactions,
            'notes': InvoiceImportTypeNotes
        }

        self.attribute_map = {
            'import_nbr': 'importNbr',
            'received_date': 'receivedDate',
            'submitter_type': 'submitterType',
            'submitted_by_nbr': 'submittedByNbr',
            'import_date': 'importDate',
            'import_user_id': 'importUserId',
            'import_status_id': 'importStatusId',
            'failed_reason': 'failedReason',
            'batch_nbr': 'batchNbr',
            'successful_transactions_count': 'successfulTransactionsCount',
            'failed_transactions_count': 'failedTransactionsCount',
            'invoice_import_transactions': 'invoiceImportTransactions',
            'notes': 'notes'
        }
        self._import_nbr = import_nbr
        self._received_date = received_date
        self._submitter_type = submitter_type
        self._submitted_by_nbr = submitted_by_nbr
        self._import_date = import_date
        self._import_user_id = import_user_id
        self._import_status_id = import_status_id
        self._failed_reason = failed_reason
        self._batch_nbr = batch_nbr
        self._successful_transactions_count = successful_transactions_count
        self._failed_transactions_count = failed_transactions_count
        self._invoice_import_transactions = invoice_import_transactions
        self._notes = notes

    @classmethod
    def from_dict(cls, dikt) -> 'InvoiceImportType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InvoiceImportType of this InvoiceImportType.  # noqa: E501
        :rtype: InvoiceImportType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def import_nbr(self) -> int:
        """Gets the import_nbr of this InvoiceImportType.


        :return: The import_nbr of this InvoiceImportType.
        :rtype: int
        """
        return self._import_nbr

    @import_nbr.setter
    def import_nbr(self, import_nbr: int):
        """Sets the import_nbr of this InvoiceImportType.


        :param import_nbr: The import_nbr of this InvoiceImportType.
        :type import_nbr: int
        """

        self._import_nbr = import_nbr

    @property
    def received_date(self) -> datetime:
        """Gets the received_date of this InvoiceImportType.


        :return: The received_date of this InvoiceImportType.
        :rtype: datetime
        """
        return self._received_date

    @received_date.setter
    def received_date(self, received_date: datetime):
        """Sets the received_date of this InvoiceImportType.


        :param received_date: The received_date of this InvoiceImportType.
        :type received_date: datetime
        """

        self._received_date = received_date

    @property
    def submitter_type(self) -> InvoiceImportSubmitterType:
        """Gets the submitter_type of this InvoiceImportType.


        :return: The submitter_type of this InvoiceImportType.
        :rtype: InvoiceImportSubmitterType
        """
        return self._submitter_type

    @submitter_type.setter
    def submitter_type(self, submitter_type: InvoiceImportSubmitterType):
        """Sets the submitter_type of this InvoiceImportType.


        :param submitter_type: The submitter_type of this InvoiceImportType.
        :type submitter_type: InvoiceImportSubmitterType
        """
        if submitter_type is None:
            raise ValueError("Invalid value for `submitter_type`, must not be `None`")  # noqa: E501

        self._submitter_type = submitter_type

    @property
    def submitted_by_nbr(self) -> str:
        """Gets the submitted_by_nbr of this InvoiceImportType.


        :return: The submitted_by_nbr of this InvoiceImportType.
        :rtype: str
        """
        return self._submitted_by_nbr

    @submitted_by_nbr.setter
    def submitted_by_nbr(self, submitted_by_nbr: str):
        """Sets the submitted_by_nbr of this InvoiceImportType.


        :param submitted_by_nbr: The submitted_by_nbr of this InvoiceImportType.
        :type submitted_by_nbr: str
        """

        self._submitted_by_nbr = submitted_by_nbr

    @property
    def import_date(self) -> datetime:
        """Gets the import_date of this InvoiceImportType.


        :return: The import_date of this InvoiceImportType.
        :rtype: datetime
        """
        return self._import_date

    @import_date.setter
    def import_date(self, import_date: datetime):
        """Sets the import_date of this InvoiceImportType.


        :param import_date: The import_date of this InvoiceImportType.
        :type import_date: datetime
        """

        self._import_date = import_date

    @property
    def import_user_id(self) -> str:
        """Gets the import_user_id of this InvoiceImportType.


        :return: The import_user_id of this InvoiceImportType.
        :rtype: str
        """
        return self._import_user_id

    @import_user_id.setter
    def import_user_id(self, import_user_id: str):
        """Sets the import_user_id of this InvoiceImportType.


        :param import_user_id: The import_user_id of this InvoiceImportType.
        :type import_user_id: str
        """
        if import_user_id is None:
            raise ValueError("Invalid value for `import_user_id`, must not be `None`")  # noqa: E501

        self._import_user_id = import_user_id

    @property
    def import_status_id(self) -> str:
        """Gets the import_status_id of this InvoiceImportType.


        :return: The import_status_id of this InvoiceImportType.
        :rtype: str
        """
        return self._import_status_id

    @import_status_id.setter
    def import_status_id(self, import_status_id: str):
        """Sets the import_status_id of this InvoiceImportType.


        :param import_status_id: The import_status_id of this InvoiceImportType.
        :type import_status_id: str
        """
        if import_status_id is None:
            raise ValueError("Invalid value for `import_status_id`, must not be `None`")  # noqa: E501

        self._import_status_id = import_status_id

    @property
    def failed_reason(self) -> str:
        """Gets the failed_reason of this InvoiceImportType.


        :return: The failed_reason of this InvoiceImportType.
        :rtype: str
        """
        return self._failed_reason

    @failed_reason.setter
    def failed_reason(self, failed_reason: str):
        """Sets the failed_reason of this InvoiceImportType.


        :param failed_reason: The failed_reason of this InvoiceImportType.
        :type failed_reason: str
        """

        self._failed_reason = failed_reason

    @property
    def batch_nbr(self) -> int:
        """Gets the batch_nbr of this InvoiceImportType.


        :return: The batch_nbr of this InvoiceImportType.
        :rtype: int
        """
        return self._batch_nbr

    @batch_nbr.setter
    def batch_nbr(self, batch_nbr: int):
        """Sets the batch_nbr of this InvoiceImportType.


        :param batch_nbr: The batch_nbr of this InvoiceImportType.
        :type batch_nbr: int
        """

        self._batch_nbr = batch_nbr

    @property
    def successful_transactions_count(self) -> int:
        """Gets the successful_transactions_count of this InvoiceImportType.


        :return: The successful_transactions_count of this InvoiceImportType.
        :rtype: int
        """
        return self._successful_transactions_count

    @successful_transactions_count.setter
    def successful_transactions_count(self, successful_transactions_count: int):
        """Sets the successful_transactions_count of this InvoiceImportType.


        :param successful_transactions_count: The successful_transactions_count of this InvoiceImportType.
        :type successful_transactions_count: int
        """

        self._successful_transactions_count = successful_transactions_count

    @property
    def failed_transactions_count(self) -> int:
        """Gets the failed_transactions_count of this InvoiceImportType.


        :return: The failed_transactions_count of this InvoiceImportType.
        :rtype: int
        """
        return self._failed_transactions_count

    @failed_transactions_count.setter
    def failed_transactions_count(self, failed_transactions_count: int):
        """Sets the failed_transactions_count of this InvoiceImportType.


        :param failed_transactions_count: The failed_transactions_count of this InvoiceImportType.
        :type failed_transactions_count: int
        """

        self._failed_transactions_count = failed_transactions_count

    @property
    def invoice_import_transactions(self) -> InvoiceImportTypeInvoiceImportTransactions:
        """Gets the invoice_import_transactions of this InvoiceImportType.


        :return: The invoice_import_transactions of this InvoiceImportType.
        :rtype: InvoiceImportTypeInvoiceImportTransactions
        """
        return self._invoice_import_transactions

    @invoice_import_transactions.setter
    def invoice_import_transactions(self, invoice_import_transactions: InvoiceImportTypeInvoiceImportTransactions):
        """Sets the invoice_import_transactions of this InvoiceImportType.


        :param invoice_import_transactions: The invoice_import_transactions of this InvoiceImportType.
        :type invoice_import_transactions: InvoiceImportTypeInvoiceImportTransactions
        """
        if invoice_import_transactions is None:
            raise ValueError("Invalid value for `invoice_import_transactions`, must not be `None`")  # noqa: E501

        self._invoice_import_transactions = invoice_import_transactions

    @property
    def notes(self) -> InvoiceImportTypeNotes:
        """Gets the notes of this InvoiceImportType.


        :return: The notes of this InvoiceImportType.
        :rtype: InvoiceImportTypeNotes
        """
        return self._notes

    @notes.setter
    def notes(self, notes: InvoiceImportTypeNotes):
        """Sets the notes of this InvoiceImportType.


        :param notes: The notes of this InvoiceImportType.
        :type notes: InvoiceImportTypeNotes
        """

        self._notes = notes
