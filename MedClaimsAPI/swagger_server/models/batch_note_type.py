# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.note_type import NoteType  # noqa: F401,E501
from swagger_server import util


class BatchNoteType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, note_type: NoteType=None, redefined_text_id: str=None):  # noqa: E501
        """BatchNoteType - a model defined in Swagger

        :param note_type: The note_type of this BatchNoteType.  # noqa: E501
        :type note_type: NoteType
        :param redefined_text_id: The redefined_text_id of this BatchNoteType.  # noqa: E501
        :type redefined_text_id: str
        """
        self.swagger_types = {
            'note_type': NoteType,
            'redefined_text_id': str
        }

        self.attribute_map = {
            'note_type': 'noteType',
            'redefined_text_id': 'redefinedTextId'
        }
        self._note_type = note_type
        self._redefined_text_id = redefined_text_id

    @classmethod
    def from_dict(cls, dikt) -> 'BatchNoteType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BatchNoteType of this BatchNoteType.  # noqa: E501
        :rtype: BatchNoteType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def note_type(self) -> NoteType:
        """Gets the note_type of this BatchNoteType.


        :return: The note_type of this BatchNoteType.
        :rtype: NoteType
        """
        return self._note_type

    @note_type.setter
    def note_type(self, note_type: NoteType):
        """Sets the note_type of this BatchNoteType.


        :param note_type: The note_type of this BatchNoteType.
        :type note_type: NoteType
        """

        self._note_type = note_type

    @property
    def redefined_text_id(self) -> str:
        """Gets the redefined_text_id of this BatchNoteType.


        :return: The redefined_text_id of this BatchNoteType.
        :rtype: str
        """
        return self._redefined_text_id

    @redefined_text_id.setter
    def redefined_text_id(self, redefined_text_id: str):
        """Sets the redefined_text_id of this BatchNoteType.


        :param redefined_text_id: The redefined_text_id of this BatchNoteType.
        :type redefined_text_id: str
        """

        self._redefined_text_id = redefined_text_id
