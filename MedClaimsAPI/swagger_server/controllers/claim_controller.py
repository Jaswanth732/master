import connexion
import six

from swagger_server.models.adjust_claim_reserve_cbm_type import AdjustClaimReserveCBMType  # noqa: E501
from swagger_server.models.adjust_claim_reserve_response_cbm_type import AdjustClaimReserveResponseCBMType  # noqa: E501
from swagger_server.models.close_claim_cbm_type import CloseClaimCBMType  # noqa: E501
from swagger_server.models.close_claim_response_cbm_type import CloseClaimResponseCBMType  # noqa: E501
from swagger_server.models.create_claim_details_cbm_type import CreateClaimDetailsCBMType  # noqa: E501
from swagger_server.models.create_claim_reserve_cbm_type import CreateClaimReserveCBMType  # noqa: E501
from swagger_server.models.create_claim_reserve_response_cbm_type import CreateClaimReserveResponseCBMType  # noqa: E501
from swagger_server.models.inline_response202 import InlineResponse202  # noqa: E501
from swagger_server.models.inline_response4001 import InlineResponse4001  # noqa: E501
from swagger_server.models.reopen_claim_cbm_type import ReopenClaimCBMType  # noqa: E501
from swagger_server.models.reopen_claim_response_cbm_type import ReopenClaimResponseCBMType  # noqa: E501
from swagger_server.models.search_claim_cbm_type import SearchClaimCBMType  # noqa: E501
from swagger_server.models.search_claim_response_cbm_type import SearchClaimResponseCBMType  # noqa: E501
from swagger_server import util


def adjust_claim_reserve(body=None):  # noqa: E501
    """Adjust Claim Reserve

    &lt;h3&gt;Purpose&lt;/h3&gt; To provide the consumer with the ability to update a Claim Reserve in MedNeXt in a single call.    &lt;h3&gt;Service Description&lt;/h3&gt;   &lt;ul&gt;     &lt;li&gt;Provide only the attributes of an existing claim reserve which he/she wishes to update.&lt;/li&gt;    &lt;li&gt; Provide only the attributes of existing claim reserve sub-entities (entity unique ids included - e.g. Reserve Detail Number for Reserve Details) he/she wishes to update.&lt;/li&gt;  &lt;li&gt; Provide new sub-entities he/she would like to create under an existing Claim Reserve (e.g. new Reserve details) Unsupported Updates.&lt;/li&gt;   &lt;/ul&gt;  &lt;h4&gt;Process Logic&lt;/h4&gt;  &lt;ul&gt;  &lt;p&gt;The Adjust Claim Reserve service logic is:&lt;/p&gt;  &lt;li&gt;An API Consumer invokes a service providing the information of the claim reserve to be adjusted.&lt;/li&gt; &lt;li&gt;Validation of Request Message Structure: The Request object will be validated if it is schematically correct. If the validation fails, an &lt;em&gt;HTTP 400 - Bad request error&lt;/em&gt; will be propagated to the caller along with an Error Information message.&lt;/li&gt; &lt;li&gt;After that, the consumer will be informed with a queue number. The Queue Number will be created to handle the asynchronous Adjust Claim Reserve process and will represent the whole request and will contain a list of queue items, one for each claim to be adjusted. If the call fails, an &lt;em&gt;HTTP 400 - Bad request&lt;/em&gt; error will be propagated to the caller along with an Error Information message&lt;/li&gt; &lt;li&gt;In the meanwhile, a new process will be initiated to make additional validations. These validations will check if the claim reserve has no pending tasks, the &lt;strong&gt;claim number&lt;/strong&gt; exists in status Open  and the information provided from the consumer is businesswised correct:  &lt;ul&gt;&lt;li&gt;&lt;strong&gt;Claim Number&lt;/strong&gt; and &lt;strong&gt;Reserve Level Indicator&lt;/strong&gt; field is not allowed to be modified. &lt;/li&gt;       &lt;li&gt;&lt;strong&gt;Total Reserve Amount&lt;/strong&gt; must be greater than or equal to zero. &lt;/li&gt;   &lt;li&gt;When &lt;strong&gt;Reserve Number&lt;/strong&gt; value is provided, it will be used by the system in combination with the Claim Number to identify the reserve entry to be updated. It should be validated against valid reserve numbers of the claim. When no Reserve Number value provided, a new reserve record will be created (Reserve Number will be assigned by the system) with the provided Claim Reserve Information for the provided claim.&lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Reserve Date&lt;/strong&gt; is not allowed to be updated when there is Reserve Type Id&#x3D;&#x27;REC&#x27;    and the Reserve Date provided is earlier than the Reserve Date of the reconciliation record.    Otherwise:  Reserve Date must be less than or equal to the system current date Reserve Date must be greater than or equal to the claim occurrence date Reserve date must be greater or equal to the latest Reconciliation date&lt;/li&gt;    &lt;li&gt;&lt;strong&gt;Reserve Amount&lt;/strong&gt; is not allowed to be updated when there is Reserve Type Id&#x3D;&#x27;REC&#x27;     and the Reserve Date provided is earlier than the Reserve Date of the reconciliation record. Otherwise: If Reserve Level Indicator&#x3D;&#x27;&#x27;Claim&#x27;&#x27; then the field is mandatory and must be numeric. In any other case it will be ignored.&lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Reserve Type Id&lt;/strong&gt; is not allowed to be updated when there is Reserve Type&#x3D;&#x27;REC&#x27; and the Reserve Date provided is earlier than the Reserve Date of the reconciliation record. Otherwise It must be a valid value based on the provided: &#x27;INIT&#x27;-Initial &#x27;ADD&#x27;-Additional &lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Total Reserve Detail Amount&lt;/strong&gt; is applicable only If Reserve Level Indicator&#x3D;&#x27;&#x27;Package&#x27;&#x27; or &#x27;&#x27;Plan&#x27;&#x27; or &#x27;&#x27;Benefit&#x27;&#x27;&lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Reserve Details&lt;/strong&gt; must be provided if Reserve Level Indicator&#x3D;&#x27;&#x27;Package&#x27;&#x27; or &#x27;&#x27;Plan&#x27;&#x27; or &#x27;&#x27;Benefit&#x27;&#x27; then the Reserve Detail, otherwise will be ignored.&lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Reserve Details Level value&lt;/strong&gt; must be the package number of the provided member of the claim if Reserve Level Indicator&#x3D;&#x27;&#x27;Package&#x27;&#x27;. If Reserve Level Indicator&#x3D;&#x27;&#x27;Plan&#x27;&#x27;, then the Reserve Details Level value provided must be the plan number which belongs to the package of the provided member of the claim. If Reserve Level Indicator&#x3D;&#x27;&#x27;Benefit&#x27;&#x27;, then the Reserve Details Level value provided must be the benefit number which belongs to the package of the provided member of the claim.&lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Reserve Details Amount&lt;/strong&gt; is not allowed to be updated when there is Reserve Type Id&#x3D;\&quot;REC\&quot; and the Reserve Date provided is earlier than the Reserve Date of the reconciliation record. &lt;/li&gt;   &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Reply: The service will reply with &lt;em&gt;HTTP 202 - Accepted&lt;/em&gt; along with the created  Queue Item object&lt;/li&gt;  &lt;/ul&gt; # noqa: E501

    :param body: 
    :type body: dict | bytes

    :rtype: AdjustClaimReserveResponseCBMType
    """
    if connexion.request.is_json:
        body = AdjustClaimReserveCBMType.from_dict(connexion.request.get_json())  # noqa: E501
    return 'do some magic!'


def close_claim(body=None):  # noqa: E501
    """Close Claim

    &lt;h3&gt;Purpose&lt;/h3&gt; To provide the user with the ability to close one or more claims in MedNeXt in a single call.  &lt;h3&gt;Service Flow Description&lt;/h3&gt; &lt;p&gt;The Close Claim service logic is:&lt;/p&gt;  &lt;ul&gt;     &lt;li&gt;An API Consumer invokes a service providing the information of the claim to be closed.         &lt;br/&gt;         &lt;br/&gt;     &lt;/li&gt;     &lt;li&gt;&lt;strong&gt;Validation of Request Message Structure&lt;/strong&gt;: The Request object will be validated if it is schematically correct.         &lt;ul&gt;             &lt;li&gt;If the validation fails, an &lt;em&gt;HTTP 400 - Bad request error&lt;/em&gt; will be propagated to the caller along with an Error Information message&lt;/li&gt;         &lt;/ul&gt;     &lt;/li&gt;     &lt;li&gt;&lt;strong&gt;Create Queue Item&lt;/strong&gt;: A new Queue Item will be created to handle the asynchronous Modify Claim Status process. This queue item will represent the whole request and will contain a list of queue items, one for each claim to be closed.         &lt;ul&gt;             &lt;li&gt;If the call fails, an &lt;em&gt;HTTP 400 - Bad request error&lt;/em&gt; will be propagated to the caller along with an Error Information message&lt;/li&gt;         &lt;/ul&gt;     &lt;/li&gt;     &lt;li&gt;&lt;strong&gt;Initiate Modify Claim Status process&lt;/strong&gt;: Initiate an asynchronous flow that is going to process the close claim information:    &lt;ul&gt;    &lt;li&gt;It will validate the status of the claim.     &lt;/li&gt;    &lt;li&gt;It will close the claim     &lt;/li&gt;    &lt;li&gt;    It will perform a new human task assignement - a milestone \&quot;Close Claim\&quot; will be attained.     &lt;/li&gt;    &lt;li&gt;If any error occur, an &lt;em&gt;HTTP 400 - Bad request&lt;/em&gt; error will be propagated to the caller along with an Error Information message.     &lt;/li&gt;    &lt;/ul&gt;     &lt;li&gt;&lt;strong&gt;Reply: &lt;/strong&gt;The service will reply with &lt;em&gt; HTTP 202 - Accepted&lt;/em&gt; along with the created  Queue Item object.&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt;  # noqa: E501

    :param body: 
    :type body: dict | bytes

    :rtype: CloseClaimResponseCBMType
    """
    if connexion.request.is_json:
        body = CloseClaimCBMType.from_dict(connexion.request.get_json())  # noqa: E501
    return 'do some magic!'


def create_claim_reserve(body=None):  # noqa: E501
    """Create Claim Reserve

    &lt;h3&gt;Purpose&lt;/h3&gt; To provide the consumer with the ability to set Reserves for one or more existing claims in MedNeXt in a single call.    &lt;h3&gt;Service Description&lt;/h3&gt;   &lt;ul&gt;     &lt;li&gt;Provide one or more claim and it&#x27;s reserves.&lt;/li&gt;    &lt;li&gt; Provide one or more reserves and it&#x27;s details for creation.&lt;/li&gt;  &lt;li&gt; Provide one or more reserves details for creation.&lt;/li&gt;   &lt;/ul&gt;  &lt;h4&gt;Process Logic&lt;/h4&gt;  &lt;ul&gt;  &lt;p&gt;The Create Claim Reserve service logic is:&lt;/p&gt;  &lt;li&gt;An API Consumer invokes a service providing the information of the claim reserve to be created.&lt;/li&gt; &lt;li&gt;Validation of Request Message Structure: The Request object will be validated if it is schematically correct. If the validation fails, an &lt;em&gt;HTTP 400 - Bad request error&lt;/em&gt; will be propagated to the caller along with an Error Information message.&lt;/li&gt; &lt;li&gt;After that, the consumer will be informed with a queue number. The Queue Number will be created to handle the asynchronous Create Claim Reserve process and will represent the whole request and will contain a list of queue items, one for each claim to be created. If the call fails, an &lt;em&gt;HTTP 400 - Bad request&lt;/em&gt; error will be propagated to the caller along with an Error Information message&lt;/li&gt; &lt;li&gt;In the meanwhile, a new process will be initiated to make additional validations. These validations will check if the claim reserve has no pending tasks, the &lt;strong&gt;claim number&lt;/strong&gt; exists in status Open and the information provided from the consumer is businesswised correct:  &lt;ul&gt;&lt;li&gt;&lt;strong&gt;Claim Number&lt;/strong&gt; and &lt;strong&gt;Reserve Level Indicator&lt;/strong&gt; field is not allowed to be modified. &lt;/li&gt;       &lt;li&gt;&lt;strong&gt;Total Reserve Amount&lt;/strong&gt; must be greater than or equal to zero. &lt;/li&gt;   &lt;li&gt;When &lt;strong&gt;Reserve Number&lt;/strong&gt; value is provided, it will be used by the system in combination with the Claim Number to identify the reserve entry to be updated. It should be validated against valid reserve numbers of the claim. When no Reserve Number value provided, a new reserve record will be created (Reserve Number will be assigned by the system) with the provided Claim Reserve Information for the provided claim.&lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Reserve Date&lt;/strong&gt; is not allowed to be updated when there is Reserve Type Id&#x3D;&#x27;REC&#x27;    and the Reserve Date provided is earlier than the Reserve Date of the reconciliation record.    Otherwise:  Reserve Date must be less than or equal to the system current date Reserve Date must be greater than or equal to the claim occurrence date Reserve date must be greater or equal to the latest Reconciliation date&lt;/li&gt;    &lt;li&gt;&lt;strong&gt;Reserve Amount&lt;/strong&gt; is not allowed to be updated when there is Reserve Type Id&#x3D;&#x27;REC&#x27;     and the Reserve Date provided is earlier than the Reserve Date of the reconciliation record. Otherwise: If Reserve Level Indicator&#x3D;&#x27;&#x27;Claim&#x27;&#x27; then the field is mandatory and must be numeric. In any other case it will be ignored.&lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Reserve Type Id&lt;/strong&gt; is not allowed to be updated when there is Reserve Type&#x3D;&#x27;REC&#x27; and the Reserve Date provided is earlier than the Reserve Date of the reconciliation record. Otherwise It must be a valid value based on the provided: &#x27;INIT&#x27;-Initial &#x27;ADD&#x27;-Additional &lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Total Reserve Detail Amount&lt;/strong&gt; is applicable only If Reserve Level Indicator&#x3D;&#x27;&#x27;Package&#x27;&#x27; or &#x27;&#x27;Plan&#x27;&#x27; or &#x27;&#x27;Benefit&#x27;&#x27;&lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Reserve Details&lt;/strong&gt; must be provided if Reserve Level Indicator&#x3D;&#x27;&#x27;Package&#x27;&#x27; or &#x27;&#x27;Plan&#x27;&#x27; or &#x27;&#x27;Benefit&#x27;&#x27; then the Reserve Detail, otherwise will be ignored.&lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Reserve Details Level value&lt;/strong&gt; must be the package number of the provided member of the claim if Reserve Level Indicator&#x3D;&#x27;&#x27;Package&#x27;&#x27;. If Reserve Level Indicator&#x3D;&#x27;&#x27;Plan&#x27;&#x27;, then the Reserve Details Level value provided must be the plan number which belongs to the package of the provided member of the claim. If Reserve Level Indicator&#x3D;&#x27;&#x27;Benefit&#x27;&#x27;, then the Reserve Details Level value provided must be the benefit number which belongs to the package of the provided member of the claim.&lt;/li&gt;   &lt;li&gt;&lt;strong&gt;Reserve Details Amount&lt;/strong&gt; is not allowed to be updated when there is Reserve Type Id&#x3D;\&quot;REC\&quot; and the Reserve Date provided is earlier than the Reserve Date of the reconciliation record. &lt;/li&gt;   &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Reply: The service will reply with &lt;em&gt;HTTP 202 - Accepted&lt;/em&gt; along with the created  Queue Item object&lt;/li&gt;  &lt;/ul&gt; # noqa: E501

    :param body: 
    :type body: dict | bytes

    :rtype: CreateClaimReserveResponseCBMType
    """
    if connexion.request.is_json:
        body = CreateClaimReserveCBMType.from_dict(connexion.request.get_json())  # noqa: E501
    return 'do some magic!'


def create_details(body=None):  # noqa: E501
    """Create Claim

    &lt;h3&gt;Purpose&lt;/h3&gt; To provide the user with the ability to create one or more claims in MedNeXt in a single call.  &lt;h3&gt;Service Flow Description&lt;/h3&gt; &lt;p&gt;The Create Claim service logic is:&lt;/p&gt;  &lt;ul&gt;     &lt;li&gt;An API Consumer invokes a service providing the information of the claim to be created.         &lt;br/&gt;         &lt;br/&gt;     &lt;/li&gt;     &lt;li&gt;&lt;strong&gt;Validation of Request Message Structure&lt;/strong&gt;: The Request object will be validated if it is schematically correct.         &lt;ul&gt;             &lt;li&gt;If the validation fails, an &lt;em&gt;HTTP 400 - Bad request error&lt;/em&gt; will be propagated to the caller along with an Error Information message&lt;/li&gt;         &lt;/ul&gt;     &lt;/li&gt;     &lt;li&gt;&lt;strong&gt;Create Queue Item&lt;/strong&gt;: A new Queue Item will be created to handle the asynchronous Create Claim business process. This queue item will represent the whole request and will contain a list of queue items, one for each claim to be created.         &lt;ul&gt;             &lt;li&gt;If the call fails, an &lt;em&gt;HTTP 400 - Bad request error&lt;/em&gt; will be propagated to the caller along with an Error Information message&lt;/li&gt;         &lt;/ul&gt;     &lt;/li&gt;     &lt;li&gt;&lt;strong&gt;Initiate Create Claim business process&lt;/strong&gt;: Initiate an asynchronous flow that is going to process the claim creation.     &lt;ul&gt;    &lt;li&gt;It will execute the business validations of the Claim to be Created..     &lt;/li&gt;    &lt;li&gt;It will check if the claim has open tasks.     &lt;/li&gt;    &lt;li&gt;It will create claim along with the related information.     &lt;/li&gt;    &lt;li&gt;    It will perform a new human task assignement - a milestone \&quot;Claim Created\&quot; will be attained.     &lt;/li&gt;    &lt;li&gt;If any error occur, an &lt;em&gt;HTTP 400 - Bad request&lt;/em&gt; error will be propagated to the caller along with an Error Information message.     &lt;/li&gt;    &lt;/ul&gt;     &lt;/li&gt;     &lt;li&gt;&lt;strong&gt;Reply: &lt;/strong&gt;The service will reply with &lt;em&gt; HTTP 202 - Accepted&lt;/em&gt; along with the created  Queue Item object.&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt;  # noqa: E501

    :param body: 
    :type body: dict | bytes

    :rtype: InlineResponse202
    """
    if connexion.request.is_json:
        body = CreateClaimDetailsCBMType.from_dict(connexion.request.get_json())  # noqa: E501
    return 'do some magic!'


def reopen_claim(body=None):  # noqa: E501
    """Reopen Claim

    &lt;h3&gt;Purpose&lt;/h3&gt; To provide the consumer with the ability to reopen one or more claims in MedNeXt in a single call.  &lt;h3&gt;Service Flow Description&lt;/h3&gt; &lt;p&gt;The Reopen Claim service logic is:&lt;/p&gt;  &lt;ul&gt;     &lt;li&gt;An API Consumer invokes a service providing the information of the claim to be reopened.         &lt;br/&gt;         &lt;br/&gt;     &lt;/li&gt;     &lt;li&gt;&lt;strong&gt;Validation of Request Message Structure&lt;/strong&gt;: The Request object will be validated if it is schematically correct.         &lt;ul&gt;             &lt;li&gt;If the validation fails, an &lt;em&gt;HTTP 400 - Bad request error&lt;/em&gt; will be propagated to the caller along with an Error Information message&lt;/li&gt;         &lt;/ul&gt;     &lt;/li&gt;     &lt;li&gt;&lt;strong&gt;Create Queue Item&lt;/strong&gt;: A new Queue Item will be created to handle the asynchronous Modify Claim Status process. This queue item will represent the whole request and will contain a list of queue items, one for each claim to be reopened.         &lt;ul&gt;             &lt;li&gt;If the call fails, an &lt;em&gt;HTTP 400 - Bad request error&lt;/em&gt; will be propagated to the caller along with an Error Information message&lt;/li&gt;         &lt;/ul&gt;     &lt;/li&gt;     &lt;li&gt;&lt;strong&gt;Modify Claim Status process&lt;/strong&gt;: Initiate an asynchronous flow that is going to process the status modification:    &lt;ul&gt;    &lt;li&gt;It will execute the business validations.     &lt;/li&gt;    &lt;li&gt;It will validate the claim status.     &lt;/li&gt;    &lt;li&gt;It will update the claim status to Open.     &lt;/li&gt;    &lt;li&gt;    It will perform a new human task assignement - a milestone \&quot;Claim Reopened\&quot; will be attained.     &lt;/li&gt;    &lt;li&gt;If any error occur, an &lt;em&gt;HTTP 400 - Bad request&lt;/em&gt; error will be propagated to the caller along with an Error Information message.     &lt;/li&gt;    &lt;/ul&gt;     &lt;/li&gt;     &lt;li&gt;&lt;strong&gt;Reply: &lt;/strong&gt;The service will reply with &lt;em&gt; HTTP 202 - Accepted&lt;/em&gt; along with the created  Queue Item object.&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; # noqa: E501

    :param body: 
    :type body: dict | bytes

    :rtype: ReopenClaimResponseCBMType
    """
    if connexion.request.is_json:
        body = ReopenClaimCBMType.from_dict(connexion.request.get_json())  # noqa: E501
    return 'do some magic!'


def search_claim(body=None):  # noqa: E501
    """Search Claim

    &lt;h3&gt;Purpose&lt;/h3&gt; To retrieve a list of claims with their information (e.g. main, custom fields, notes, reserves etc.) based on specific criteria.   &lt;h3&gt;Service Flow Description&lt;/h3&gt; &lt;p&gt;The Search Claim service logic is:&lt;/p&gt;  &lt;ul&gt;     &lt;li&gt;An API Consumer invokes a service providing the claim search criteria.         &lt;br/&gt;         &lt;br/&gt;     &lt;/li&gt;     &lt;li&gt;&lt;strong&gt;Validation of Request Message Structure&lt;/strong&gt;: The Request object will be validated if it is schematically correct.         &lt;ul&gt;             &lt;li&gt;If the validation fails, an &lt;em&gt;HTTP 400 - Bad request error&lt;/em&gt; will be propagated to the caller along with an Error Information message.&lt;/li&gt;         &lt;/ul&gt;     &lt;/li&gt;     &lt;li&gt;&lt;strong&gt;Retrieve Claim Information:&lt;/strong&gt;         &lt;ul&gt;             &lt;li&gt;If no resources are found(from the operation that return the main Claim Information) with the provided criteria, an &lt;em&gt;HTTP 404 - Not found&lt;/em&gt; will be propagated to the caller.&lt;/li&gt;        &lt;li&gt;If any call fails, an &lt;em&gt;HTTP 400 - Bad request&lt;/em&gt; error will be propagated to the caller along with an Error Information message.&lt;/li&gt;         &lt;/ul&gt;     &lt;/li&gt;     &lt;li&gt;&lt;strong&gt;Reply: &lt;/strong&gt;The service will reply with &lt;em&gt; HTTP 200 - OK along with the claim information.&lt;/em&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; # noqa: E501

    :param body: 
    :type body: dict | bytes

    :rtype: SearchClaimResponseCBMType
    """
    if connexion.request.is_json:
        body = SearchClaimCBMType.from_dict(connexion.request.get_json())  # noqa: E501
    return 'do some magic!'
